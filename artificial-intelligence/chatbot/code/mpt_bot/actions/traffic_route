#to get fastest route considering traffic 
import requests

def fetch_route(source_coords, destination_coords, api_key):
    base_url = "https://api.tomtom.com/routing/1/calculateRoute"
    url = f"{base_url}/{source_coords}:{destination_coords}/json"

    params = {
        "key": api_key,
        "traffic": "true", 
        "routeType": "fastest", 
    }

    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"API call failed with status code {response.status_code}"}
    except Exception as e:
        return {"error": str(e)}

start_cords = "-37.813629,144.963058"  #melboune cbd
destination_cords = "-37.830601,144.980832"  # Albert Park

api_key = "1ktSQErBv5y6ykTlW0LmDKQ6cPH5yF8V"

route_data = fetch_route(start_cords, destination_cords, api_key)

if "error" in route_data:
    print(f"Error: {route_data['error']}")
else:
    routes = route_data.get("routes", [])
    if not routes:
        print("No routes found.")
    else:
        route = routes[0]
        summary = route.get("summary", {})
        distance = summary.get("lengthInMeters", 0) / 1000  # Convert to kilometers
        travel_time = summary.get("travelTimeInSeconds", 0) / 60  # Convert to minutes

     

import requests

def get_traffic_details(api_key, location):

    url = f"https://api.tomtom.com/traffic/services/4/flowSegmentData/absolute/10/json"
    latitude, longitude = location
    params = {
        "key": api_key,
        "point": f"{latitude},{longitude}"
    }
    
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        
        traffic_info = {
            "current_speed": data['flowSegmentData']['currentSpeed'],
            "free_flow_speed": data['flowSegmentData']['freeFlowSpeed'],
            "confidence": data['flowSegmentData']['confidence'] * 100  # Convert to percentage
        }
        return traffic_info
    
    except requests.exceptions.RequestException as e:
        print(f"Error fetching traffic details: {e}")
        return None

#Function to get traffic status based on current and free flow speeds
def get_traffic_status(current_speed, free_flow_speed):
    speed_ratio = current_speed / free_flow_speed
    if speed_ratio >= 0.8:
        return "light"
    elif 0.6 <= speed_ratio < 0.8:
        return "moderate"
    else:
        return "heavy"
        

 #traffic details for the starting location
start_location = tuple(map(float, start_cords.split(',')))  # Melbourne CBD
traffic_details_start = get_traffic_details(api_key, start_location)

#traffic details for the destination location
destination_location = tuple(map(float, destination_cords.split(',')))  # Albert Park
traffic_details_destination = get_traffic_details(api_key, destination_location)

if traffic_details_start and traffic_details_destination:
    traffic_status_start = get_traffic_status(
        traffic_details_start['current_speed'], traffic_details_start['free_flow_speed']
    )
    traffic_status_destination = get_traffic_status(
        traffic_details_destination['current_speed'], traffic_details_destination['free_flow_speed']
    )

    
    print(f"Traffic is {traffic_status_start} on your route from CBD to Albert Park "
          f"with current speed of {traffic_details_start['current_speed']} km/h. "
          f"Estimated Travel Time from CBD to Albert Park is: {travel_time:.2f} minutes "
          f"and Distance is: {distance:.2f} km.")
else:
    print("Failed to retrieve traffic details.")
